//UNIVERSIDAD NACIONAL EXPERIMENTAL DE GUAYANA
//INGENIERIA EN INFORMATICA
//UC: LENGUAJES Y COMPILADORES - 2016-2
//Integrantes:
//Arzola Jose 24001005
//Cones Victor 22820595
//Larez Hector 24890347
//Mendoza Carlos 22587983
//Navas Angel 24482546

// CODIGO DE USUARIO
import java.lang.System;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;

// DIRECTIVAS
%%

%eofval{
    { 
        System.out.printf("Final del Archivo\n");
        // System.exit(0);
        return Token(sym.EOF); 
    }
%eofval}

%{
    String tok = "";

    private Symbol Token(int token, Object lexema) throws IOException {
        int linea = yyline + 1;
        tok = (String)lexema;
        if (token != sym.EOF)
            PuntoCodigo.informacionCodigo(linea, tok);
        return new Symbol(token, lexema);
    }

    private Symbol Token(int token) throws IOException {
        return Token(token, yytext());
    }

%}

%cup
%line
%char
%full
%notunix
%state COMENTCOMPLETE
%state COMENTLINE

ESPACIOOTERMINADOR = [\ \t\f\r|\n]
LINEABLANCO = (\r\n)(\r\n)

LETRAS = [a-zA-Z]
DIGITOS = [0-9] 

OPRELACIONALES = "<"|">"|"=<"|">="|"="
OPLOGICOS = /\\|\\/|"Â¬"|"<="|"<=>"

SUMA = "+"
RESTA = "-"
MULT = "*"
DIV = "/"
LOG = "log"
ELEVADO = "^"

ARROBA = "@"
ASPERSAR = "&"
NUMERAL = "#"
DOLAR = "$"
APILAR = "{"
DESAPILAR = "}"

DOBLERAYA = "--"
COMA = ","
PUNTO = "."
DOSPUNTOS = ":"
ABRIRPARENTESIS = "("
CERRARPARENTESIS = ")"
OPGENERATRIZ = "->"
OPFUNCIONDEPARAMETRO = ":="

TITULO = "Titulo"
COMENTARIOS = "Comentarios"
GRAMATICA = "Gramatica"
PARAMETRO = "parametro"
VALOR = "valor"
SIMBOLO = "simbolo"
CONDICIONES = "Condiciones"
PASOS = "pasos"
ANGULO = "angulo"
POSICION = "posicion" 
MATRIZ = "matriz"
GENERATRIZ = "generatriz"
PROBABILIDAD = "probabilidad"
FIN = "Fin"
TIPOREAL = "Real"

NOMBREDELTITULO = ((" ")|({LETRAS})|({DIGITOS}))*
BLOQUEDECOMENTARIO = (({LETRAS})|({DIGITOS})|({ESPACIOOTERMINADOR}))*
TKTITULO = ({TITULO})({DOSPUNTOS})({NOMBREDELTITULO})({PUNTO})
TKCOMENTARIO = ({COMENTARIOS})({BLOQUEDECOMENTARIO})({PUNTO})

REAL = ({DIGITOS})+({PUNTO})({DIGITOS})+
ENTERO = ({DIGITOS})+
TKNUM = {REAL}|{ENTERO}

ALFANUMERICO = ({LETRAS}|{DIGITOS})*
TKIDSIMBOLOS = ([A-Z])({DIGITOS})*
TKIDPARAMETROS = ([a-z])({ALFANUMERICO})
                  
%%

<YYINITIAL> {TKTITULO}                       
{
    return Token(sym.TKTITULO);
}

<YYINITIAL> {TKCOMENTARIO}                       
{
   return Token(sym.TKCOMENTARIO);
}
<YYINITIAL> {LINEABLANCO}                       
{
   return Token(sym.LINEABLANCO);
}
<YYINITIAL> {GRAMATICA}                       
{
   return Token(sym.GRAMATICA);
}
<YYINITIAL> {VALOR}                       
{
   return Token(sym.VALOR);
}
<YYINITIAL> {SIMBOLO}                       
{
   return Token(sym.SIMBOLO);
}
<YYINITIAL> {CONDICIONES}                       
{
   return Token(sym.CONDICIONES);
}
<YYINITIAL> {PASOS}                       
{
   return Token(sym.PASOS);
}
<YYINITIAL> {ANGULO}                       
{
   return Token(sym.ANGULO);
}
<YYINITIAL> {POSICION}                       
{
   return Token(sym.POSICION);
}
<YYINITIAL> {MATRIZ}                       
{
   return Token(sym.MATRIZ);
}
<YYINITIAL> {GENERATRIZ}                       
{
   return Token(sym.GENERATRIZ);
}
<YYINITIAL> {PROBABILIDAD}                       
{
   return Token(sym.PROBABILIDAD);
}
<YYINITIAL> {TKNUM}                       
{
   return Token(sym.TKNUM);
}
<YYINITIAL> {TIPOREAL}                       
{
   return Token(sym.TIPOREAL);
}
<YYINITIAL> {OPFUNCIONDEPARAMETRO}                       
{
   return Token(sym.OPFUNCIONDEPARAMETRO);
}

<YYINITIAL> {SUMA}                       
{
   return Token(sym.SUMA);
}
<YYINITIAL> {RESTA}                       
{
   return Token(sym.RESTA);
}
<YYINITIAL> {MULT}                       
{
   return Token(sym.MULT);
}
<YYINITIAL> {DIV}                       
{
   return Token(sym.DIV);
}
<YYINITIAL> {LOG}                       
{
   return Token(sym.LOG);
}
<YYINITIAL> {ELEVADO}                       
{
   return Token(sym.ELEVADO);
}

<YYINITIAL> {OPRELACIONALES}                       
{
   return Token(sym.OPRELACIONALES);
}
<YYINITIAL> {OPLOGICOS}                       
{
  return Token(sym.OPLOGICOS);
}
<YYINITIAL> {OPGENERATRIZ}                       
{
   return Token(sym.OPGENERATRIZ);

}
<YYINITIAL> {TKIDSIMBOLOS}                       
{
    return Token(sym.TKIDSIMBOLOS);
}
<YYINITIAL> {PARAMETRO}                       
{
    return Token(sym.PARAMETRO);
}
<YYINITIAL> {TKIDPARAMETROS}                       
{
    return Token(sym.TKIDPARAMETROS);
}
<YYINITIAL> {TIPOREAL}                       
{
    return Token(sym.TIPOREAL);
}
<YYINITIAL> {ARROBA}                       
{
    return Token(sym.ARROBA);
}
<YYINITIAL> {ASPERSAR}                       
{
    return Token(sym.ASPERSAR);
}
<YYINITIAL> {NUMERAL}                       
{
    return Token(sym.NUMERAL);
}
<YYINITIAL> {DOLAR}                       
{
    return Token(sym.DOLAR);
}
<YYINITIAL> {APILAR}                       
{
    return Token(sym.APILAR);
}
<YYINITIAL> {DESAPILAR}                       
{
    return Token(sym.DESAPILAR);
}
<YYINITIAL> {DOBLERAYA}                       
{
    return Token(sym.DOBLERAYA);
}
<YYINITIAL> {COMA}                       
{
    return Token(sym.COMA);
}
<YYINITIAL> {PUNTO}                       
{
    return Token(sym.PUNTO);
}
<YYINITIAL> {DOSPUNTOS}                       
{
    return Token(sym.DOSPUNTOS);
}
<YYINITIAL> {ABRIRPARENTESIS}                       
{
    return Token(sym.ABRIRPARENTESIS);
}
<YYINITIAL> {CERRARPARENTESIS}                       
{
    return Token(sym.CERRARPARENTESIS);
}
<YYINITIAL> {FIN}                       
{
    return Token(sym.FIN);
}


<YYINITIAL> {ESPACIOOTERMINADOR}+   
{}

<YYINITIAL> .
{
    System.out.println("Error lexico initial en <" + yyline + " , " + yychar + 
        "> no se reconoce " + yytext());
    yychar = 0;
}

<COMENTCOMPLETE> .
{
    System.out.println("Error lexico en estado comentario completo no se cerro las llaves <" + yyline + " , " + yychar + 
        "> no se reconoce " + yytext());
    yychar = 0;
}

<COMENTLINE> .
{
    System.out.println("Error lexico en estado linea <" + yyline + " , " + yychar + 
        "> no se reconoce " + yytext());
    yychar = 0;
}